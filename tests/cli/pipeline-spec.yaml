raise-exception:
  pipeline:
    - run: raise_exception
      code: raise Exception()

failure-no-errors:
  pipeline:
    - run: success
      code: ""

success:
  pipeline:
  - run: success
    code: |
          from datapackage_pipelines.wrapper import ingest, spew
          parameters, datapackage, resources = ingest()
          spew(datapackage, [])

verbose-logs-with-sleep:
  pipeline:
  - run: code
    code: |
      from datapackage_pipelines.wrapper import ingest, spew
      import logging, itertools, time
      log_numbers = itertools.count()
      def log_line():
        logging.info('log line {}'.format(next(log_numbers)))
      log_line()
      time.sleep(.1)
      log_line()
      time.sleep(.1)
      log_line()
      time.sleep(.1)
      parameters, datapackage, resources = ingest()
      log_line()
      time.sleep(.1)
      log_line()
      time.sleep(.1)
      log_line()
      time.sleep(.1)
      spew(datapackage, [])
      log_line()
      time.sleep(.1)
      log_line()
      time.sleep(.1)
      log_line()

load-resource-progress-log:
  pipeline:
  - run: load_resource
    parameters:
      url: ../data/datapackage.json
      resource: my-spiffy-resource
      log-progress-rows: 2